AudioWorkletProcessor.prototype._33=function(){this._43=true;this.port.onmessage=(_53)=>{if(_53.data==="kill")this._43=false;};};class _63 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._33();}process(_73,_83,parameters){const input=_73[0];const bypass=parameters.bypass;for(let c=0;c<input.length;++c){const _93=input[c];for(let _a3=0;_a3<_93.length;++_a3){const _b3=(bypass[_a3]!==undefined)?bypass[_a3]:bypass[0];
_83[_b3][c][_a3]=_93[_a3];}}return this._43;}}class _c3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._33();}process(_73,_83,parameters){const _d3=_73[0];const _e3=_73[1];const output=_83[0];const gain=parameters.gain;for(let c=0;c<_e3.length;++c){const _93=_e3[c];const _f3=output[c];for(let _a3=0;_a3<_93.length;++_a3)_f3[_a3]=_93[_a3];}for(let c=0;c<_d3.length;++c){const _93=_d3[c];const _f3=output[c];
for(let _a3=0;_a3<_93.length;++_a3){const _g3=(gain[_a3]!==undefined)?gain[_a3]:gain[0];_f3[_a3]+=_93[_a3]*_g3;}}return this._43;}}registerProcessor("audio-bus-input",_63);registerProcessor("audio-bus-output",_c3);class _h3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100}
,{name:"resolution",automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _i3=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_j3){super();this._33();const _k3=_j3.outputChannelCount[0];this._l3=new Float32Array(_k3);this._m3=new Uint32Array(_k3);}process(_73,_83,parameters){const input=_73[0];const output=_83[0];const bypass=parameters.bypass;const gain=parameters.gain;
const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _93=input[c];const _f3=output[c];for(let _a3=0;_a3<_93.length;++_a3){_f3[_a3]=_93[_a3];if(this._m3[c]===0)this._l3[c]=_93[_a3];const _n3=(factor[_a3]!==undefined)?factor[_a3]:factor[0];++this._m3[c];this._m3[c]%=_n3;const _b3=(bypass[_a3]!==undefined)?bypass[_a3]:bypass[0];if(_b3>0.0){continue;}let _o3=this._l3[c];const _g3=(gain[_a3]!==undefined)?gain[_a3]:gain[0];_o3*=_g3;_o3=Math.max(Math.min(_o3,
1.0),-1.0);const _p3=(resolution[_a3]!==undefined)?resolution[_a3]:resolution[0];const max=(_o3>0.0)?_h3._i3[_p3]-1:_h3._i3[_p3];_o3=Math.round(_o3*max)/max;const _q3=(mix[_a3]!==undefined)?mix[_a3]:mix[0];_f3[_a3]*=(1.0-_q3);_f3[_a3]+=(_o3*_q3);}}return this._43;}}registerProcessor("bitcrusher-processor",_h3);class _r3{constructor(_s3=1e-3){this.setTime(_s3);}setTime(_s3){this._t3=Math.exp(-1/(_s3*sampleRate));}process(_u3,_v3){return _u3+this._t3*(_v3-_u3);}}class _w3{constructor(_x3,_y3){this._z3=new _r3(_x3);
this._A3=new _r3(_y3);this._B3=_x3;this._C3=_y3;}_D3(_s3){if(_s3===this._B3)return;this._z3.setTime(_s3);this._B3=_s3;}_E3(_s3){if(_s3===this._C3)return;this._A3.setTime(_s3);this._C3=_s3;}process(_u3,_v3){if(_u3>_v3)return this._z3.process(_u3,_v3);else return this._A3.process(_u3,_v3);}}class _F3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0}
,{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_G3){super();this._33();const _z3=_F3.parameterDescriptors.find(_H3=>_H3.name==="attack");const _A3=_F3.parameterDescriptors.find(_H3=>_H3.name==="release");
this._I3=new _w3(_z3.defaultValue,_A3.defaultValue);this._J3=0;}process(_K3,_L3,_M3){const input=_K3[0];const output=_L3[0];const bypass=_M3.bypass;const ingain=_M3.ingain;const outgain=_M3.outgain;const threshold=_M3.threshold;const ratio=_M3.ratio;const attack=_M3.attack;const release=_M3.release;if(input.length===0)return this._43;for(let _a3=0;_a3<input[0].length;++_a3){let frame=input.map(_N3=>_N3[_a3]);output.forEach((_N3,_O3)=>{_N3[_a3]=frame[_O3];});const _P3=(ingain[_a3]!==undefined)?ingain[_a3]:ingain[0];
frame=frame.map(_Q3=>_Q3*=_P3);const rect=frame.map(_Q3=>Math.abs(_Q3));const max=Math.max(...rect);const _R3=_S3(max);const _T3=(threshold[_a3]!==undefined)?threshold[_a3]:threshold[0];const _U3=_S3(_T3);const _V3=Math.max(0,_R3-_U3);const _z3=(attack[_a3]!==undefined)?attack[_a3]:attack[0];const _A3=(release[_a3]!==undefined)?release[_a3]:release[0];this._I3._D3(_z3);this._I3._E3(_A3);this._J3=this._I3.process(_V3,this._J3);const _b3=(bypass[_a3]!==undefined)?bypass[_a3]:bypass[0];if(_b3>0)continue;const _p3=(ratio[_a3]!==undefined)?ratio[_a3]:ratio[0];
const _W3=(this._J3/_p3)-this._J3;const _g3=_X3(_W3);frame=frame.map(_Q3=>_Q3*=_g3);const _Y3=(outgain[_a3]!==undefined)?outgain[_a3]:outgain[0];frame=frame.map(_Q3=>_Q3*=_Y3);output.forEach((_N3,_O3)=>{_N3[_a3]=frame[_O3];});}return this._43;}}function _S3(_Z3){return 20*Math.log10(_Z3);}function _X3(_Z3){return Math.pow(10,_Z3/20);}registerProcessor("compressor-processor",_F3);class __3 extends AudioWorkletProcessor{static _04=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:__3._04},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_j3){super();this._33();const _k3=_j3.outputChannelCount[0];const _14=(__3._04*sampleRate)+1;this.buffer=new Array(_k3);this._24=new Uint32Array(_k3);for(let c=0;c<_k3;++c)this.buffer[c]=new Float32Array(_14);
}process(_73,_83,parameters){const input=_73[0];const output=_83[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _93=input[c];const _f3=output[c];for(let _a3=0;_a3<_93.length;++_a3){_f3[_a3]=_93[_a3];const _T3=(time[_a3]!==undefined)?time[_a3]:time[0];const _34=this._44(c,_T3);const _n3=(feedback[_a3]!==undefined)?feedback[_a3]:feedback[0];const _54=_93[_a3]+(_34*_n3);this.write(c,_54);const _b3=(bypass[_a3]!==undefined)?bypass[_a3]:bypass[0];
if(_b3>0.0){continue;}const _q3=(mix[_a3]!==undefined)?mix[_a3]:mix[0];_f3[_a3]*=(1-_q3);_f3[_a3]+=(_34*_q3);}}return this._43;}_44(_64,_s3){const _74=_s3*sampleRate;let _84=(this._24[_64]-~~_74);let _94=(_84-1);while(_84<0)_84+=this.buffer[_64].length;while(_94<0)_94+=this.buffer[_64].length;const frac=_74-~~_74;const _a4=this.buffer[_64][_84];const _b4=this.buffer[_64][_94];return _a4+(_b4-_a4)*frac;}write(_64,_c4){++this._24[_64];this._24[_64]%=this.buffer[_64].length;this.buffer[_64][this._24[_64]]=_c4;
}}registerProcessor("delay-processor",__3);class _d4 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._33();}process(_e4,_f4,_g4){const input=_e4[0];const _h4=_f4[0];const _i4=_f4[1];for(let c=0;c<input.length;++c){const _93=input[c];const _j4=_h4[c];const _k4=_i4[c];for(let _a3=0;_a3<_93.length;++_a3){_j4[_a3]=_93[_a3];_k4[_a3]=_93[_a3];}}return this._43;}}class _l4 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._33();}process(_e4,_f4,_g4){const _d3=_e4[0];const _e3=_e4[1];const output=_f4[0];const bypass=_g4.bypass;for(let c=0;c<_e3.length;++c){const _m4=_d3[c];const _n4=_e3[c];const _f3=output[c];for(let _a3=0;_a3<_m4.length;++_a3){const _b3=(bypass[_a3]!==undefined)?bypass[_a3]:bypass[0];if(_b3>0){_f3[_a3]=_n4[_a3];}else {_f3[_a3]=_m4[_a3];}}}return this._43;}}registerProcessor("eq-input",_d4);registerProcessor("eq-output",_l4);class _o4 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._33();}process(_73,_83,parameters){const input=_73[0];const output=_83[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let c=0;c<input.length;++c){const _93=input[c];const _f3=output[c];for(let _a3=0;_a3<_93.length;++_a3){_f3[_a3]=_93[_a3];const _b3=(bypass[_a3]!==undefined)?bypass[_a3]:bypass[0];
if(_b3>0.0){continue;}const _g3=(gain[_a3]!==undefined)?gain[_a3]:gain[0];_f3[_a3]*=_g3;}}return this._43;}}registerProcessor("gain-processor",_o4);class _p4 extends AudioWorkletProcessor{static get parameterDescriptors(){const _q4=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_q4),minValue:10.0,maxValue:_q4},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0}
,{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_j3){super();this._33();const _k3=_j3.outputChannelCount[0];this._r4=0;this._s4=0;this._t4=0;this._u4=0;this._v4=0;this._w4=new Float32Array(_k3);this._x4=new Float32Array(_k3);this._y4=new Float32Array(_k3);this._z4=new Float32Array(_k3);this._A4=-1;this._B4=-1;this._C4=-1;}process(_73,_83,parameters){const input=_73[0];const output=_83[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;
const _D4=(freq.length===1&&q.length===1&&gain.length===1);if(_D4)this._E4(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _93=input[c];const _f3=output[c];for(let _a3=0;_a3<_93.length;++_a3){if(_D4===false){const _n3=(freq[_a3]!==undefined)?freq[_a3]:freq[0];const _F4=(q[_a3]!==undefined)?q[_a3]:q[0];const _g3=(gain[_a3]!==undefined)?gain[_a3]:gain[0];this._E4(_n3,_F4,_g3);}const _G4=this._t4*_93[_a3]+this._u4*this._w4[c]+this._v4*this._x4[c]-this._r4*this._y4[c]-this._s4*this._z4[c];this._x4[c]=this._w4[c];
this._w4[c]=_93[_a3];this._z4[c]=this._y4[c];this._y4[c]=_G4;const _b3=(bypass[_a3]!==undefined)?bypass[_a3]:bypass[0];_f3[_a3]=(_b3>0)?_93[_a3]:_G4;}}return this._43;}_E4(_H4,_I4,_J4){if(_H4===this._A4&&_I4===this._B4&&_J4===this._C4)return;const _K4=2*Math.PI*_H4/sampleRate;const _L4=Math.cos(_K4);const _M4=Math.sqrt(_J4);const _N4=_M4+1;const _O4=_M4-1;const _P4=_N4*_L4;const _Q4=_O4*_L4;const _R4=_N4-_Q4;const _S4=_N4+_Q4;const alpha=Math.sin(_K4)/(2*_I4);const _T4=(2*Math.sqrt(_M4)*alpha);const _U4=_R4+_T4;
const _r4=2*(_O4-_P4);const _s4=_R4-_T4;const _t4=_M4*(_S4+_T4);const _u4=-2*_M4*(_O4+_P4);const _v4=_M4*(_S4-_T4);this._r4=_r4/_U4;this._s4=_s4/_U4;this._t4=_t4/_U4;this._u4=_u4/_U4;this._v4=_v4/_U4;this._A4=_H4;this._B4=_I4;this._C4=_J4;}}registerProcessor("hi-shelf-processor",_p4);class _V4 extends AudioWorkletProcessor{static get parameterDescriptors(){const _W4=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,
_W4),minValue:10.0,maxValue:_W4},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_j3){super();this._33();const _k3=_j3.outputChannelCount[0];this._r4=0;this._s4=0;this._t4=0;this._u4=0;this._v4=0;this._w4=new Float32Array(_k3);this._x4=new Float32Array(_k3);this._y4=new Float32Array(_k3);this._z4=new Float32Array(_k3);this._X4=-1;this._B4=-1;}process(_73,_83,parameters){const input=_73[0];const output=_83[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;
const q=parameters.q;const _D4=(cutoff.length===1&&q.length===1);if(_D4)this._E4(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _93=input[c];const _f3=output[c];for(let _a3=0;_a3<_93.length;++_a3){if(_D4===false){const c=(cutoff[_a3]!==undefined)?cutoff[_a3]:cutoff[0];const _F4=(q[_a3]!==undefined)?q[_a3]:q[0];this._E4(c,_F4);}const _G4=this._t4*_93[_a3]+this._u4*this._w4[c]+this._v4*this._x4[c]-this._r4*this._y4[c]-this._s4*this._z4[c];this._x4[c]=this._w4[c];this._w4[c]=_93[_a3];this._z4[c]=this._y4[c];
this._y4[c]=_G4;const _b3=(bypass[_a3]!==undefined)?bypass[_a3]:bypass[0];_f3[_a3]=(_b3>0)?_93[_a3]:_G4;}}return this._43;}_E4(_Y4,_I4){if(_Y4===this._X4&&_I4===this._B4)return;const _K4=2*Math.PI*_Y4/sampleRate;const alpha=Math.sin(_K4)/(2*_I4);const _L4=Math.cos(_K4);const _U4=1+alpha;const _r4=-2*_L4;const _s4=1-alpha;const _t4=(1+_L4)/2;const _u4=-1-_L4;const _v4=(1+_L4)/2;this._r4=_r4/_U4;this._s4=_s4/_U4;this._t4=_t4/_U4;this._u4=_u4/_U4;this._v4=_v4/_U4;this._X4=_Y4;this._B4=_I4;}}registerProcessor("hpf2-processor",
_V4);class _Z4 extends AudioWorkletProcessor{static get parameterDescriptors(){const _q4=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_q4),minValue:10.0,maxValue:_q4},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_j3){super();this._33();const _k3=_j3.outputChannelCount[0];
this._r4=0;this._s4=0;this._t4=0;this._u4=0;this._v4=0;this._w4=new Float32Array(_k3);this._x4=new Float32Array(_k3);this._y4=new Float32Array(_k3);this._z4=new Float32Array(_k3);this._A4=-1;this._B4=-1;this._C4=-1;}process(_73,_83,parameters){const input=_73[0];const output=_83[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _D4=(freq.length===1&&q.length===1&&gain.length===1);if(_D4)this._E4(freq[0],q[0],gain[0]);for(let c=0;c<input.length;
++c){const _93=input[c];const _f3=output[c];for(let _a3=0;_a3<_93.length;++_a3){if(_D4===false){const _n3=(freq[_a3]!==undefined)?freq[_a3]:freq[0];const _F4=(q[_a3]!==undefined)?q[_a3]:q[0];const _g3=(gain[_a3]!==undefined)?gain[_a3]:gain[0];this._E4(_n3,_F4,_g3);}const _G4=this._t4*_93[_a3]+this._u4*this._w4[c]+this._v4*this._x4[c]-this._r4*this._y4[c]-this._s4*this._z4[c];this._x4[c]=this._w4[c];this._w4[c]=_93[_a3];this._z4[c]=this._y4[c];this._y4[c]=_G4;const _b3=(bypass[_a3]!==undefined)?bypass[_a3]:bypass[0];
_f3[_a3]=(_b3>0)?_93[_a3]:_G4;}}return this._43;}_E4(_H4,_I4,_J4){if(_H4===this._A4&&_I4===this._B4&&_J4===this._C4)return;const _K4=2*Math.PI*_H4/sampleRate;const _L4=Math.cos(_K4);const _M4=Math.sqrt(_J4);const _N4=_M4+1;const _O4=_M4-1;const _P4=_N4*_L4;const _Q4=_O4*_L4;const _R4=_N4-_Q4;const _S4=_N4+_Q4;const alpha=Math.sin(_K4)/(2*_I4);const _T4=(2*Math.sqrt(_M4)*alpha);const _U4=_S4+_T4;const _r4=-2*(_O4+_P4);const _s4=_S4-_T4;const _t4=_M4*(_R4+_T4);const _u4=2*_M4*(_O4-_P4);const _v4=_M4*(_R4-_T4);this._r4=_r4/_U4;
this._s4=_s4/_U4;this._t4=_t4/_U4;this._u4=_u4/_U4;this._v4=_v4/_U4;this._A4=_H4;this._B4=_I4;this._C4=_J4;}}registerProcessor("lo-shelf-processor",_Z4);class __4 extends AudioWorkletProcessor{static get parameterDescriptors(){const _W4=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_W4),minValue:10.0,maxValue:_W4},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}
];}constructor(_j3){super();this._33();const _k3=_j3.outputChannelCount[0];this._r4=0;this._s4=0;this._t4=0;this._u4=0;this._v4=0;this._w4=new Float32Array(_k3);this._x4=new Float32Array(_k3);this._y4=new Float32Array(_k3);this._z4=new Float32Array(_k3);this._X4=-1;this._B4=-1;}process(_73,_83,parameters){const input=_73[0];const output=_83[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _D4=(cutoff.length===1&&q.length===1);if(_D4)this._E4(cutoff[0],q[0]);for(let c=0;
c<input.length;++c){const _93=input[c];const _f3=output[c];for(let _a3=0;_a3<_93.length;++_a3){if(_D4===false){const c=(cutoff[_a3]!==undefined)?cutoff[_a3]:cutoff[0];const _F4=(q[_a3]!==undefined)?q[_a3]:q[0];this._E4(c,_F4);}const _G4=this._t4*_93[_a3]+this._u4*this._w4[c]+this._v4*this._x4[c]-this._r4*this._y4[c]-this._s4*this._z4[c];this._x4[c]=this._w4[c];this._w4[c]=_93[_a3];this._z4[c]=this._y4[c];this._y4[c]=_G4;const _b3=(bypass[_a3]!==undefined)?bypass[_a3]:bypass[0];_f3[_a3]=(_b3>0)?_93[_a3]:_G4;
}}return this._43;}_E4(_Y4,_I4){if(_Y4===this._X4&&_I4===this._B4)return;const _K4=2*Math.PI*_Y4/sampleRate;const alpha=Math.sin(_K4)/(2*_I4);const _L4=Math.cos(_K4);const _U4=1+alpha;const _r4=-2*_L4;const _s4=1-alpha;const _t4=(1-_L4)/2;const _u4=1-_L4;const _v4=(1-_L4)/2;this._r4=_r4/_U4;this._s4=_s4/_U4;this._t4=_t4/_U4;this._u4=_u4/_U4;this._v4=_v4/_U4;this._X4=_Y4;this._B4=_I4;}}registerProcessor("lpf2-processor",__4);class _05 extends AudioWorkletProcessor{static get parameterDescriptors(){const _q4=sampleRate*0.45;
return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_q4),minValue:10.0,maxValue:_q4},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_j3){super();this._33();const _k3=_j3.outputChannelCount[0];this._r4=0;this._s4=0;this._t4=0;this._u4=0;this._v4=0;this._w4=new Float32Array(_k3);this._x4=new Float32Array(_k3);
this._y4=new Float32Array(_k3);this._z4=new Float32Array(_k3);this._A4=-1;this._B4=-1;this._C4=-1;}process(_73,_83,parameters){const input=_73[0];const output=_83[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _D4=(freq.length===1&&q.length===1&&gain.length===1);if(_D4)this._E4(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _93=input[c];const _f3=output[c];for(let _a3=0;_a3<_93.length;++_a3){if(_D4===false){const _n3=(freq[_a3]!==undefined)?freq[_a3]:freq[0];
const _F4=(q[_a3]!==undefined)?q[_a3]:q[0];const _g3=(gain[_a3]!==undefined)?gain[_a3]:gain[0];this._E4(_n3,_F4,_g3);}const _G4=this._t4*_93[_a3]+this._u4*this._w4[c]+this._v4*this._x4[c]-this._r4*this._y4[c]-this._s4*this._z4[c];this._x4[c]=this._w4[c];this._w4[c]=_93[_a3];this._z4[c]=this._y4[c];this._y4[c]=_G4;const _b3=(bypass[_a3]!==undefined)?bypass[_a3]:bypass[0];_f3[_a3]=(_b3>0)?_93[_a3]:_G4;}}return this._43;}_E4(_H4,_I4,_J4){if(_H4===this._A4&&_I4===this._B4&&_J4===this._C4)return;const _K4=2*Math.PI*_H4/sampleRate;
const _L4=Math.cos(_K4);const _M4=Math.sqrt(_J4);const alpha=Math.sin(_K4)/(2*_I4);const _15=alpha/_M4;const _25=alpha*_M4;const _U4=1+_15;const _r4=-2*_L4;const _s4=1-_15;const _t4=1+_25;const _u4=_r4;const _v4=1-_25;this._r4=_r4/_U4;this._s4=_s4/_U4;this._t4=_t4/_U4;this._u4=_u4/_U4;this._v4=_v4/_U4;this._A4=_H4;this._B4=_I4;this._C4=_J4;}}registerProcessor("peak-eq-processor",_05);class _35{constructor(_45){this._55=0;this._65=0;this.feedback=0;this._75=0;this.buffer=new Float32Array(_45);this._85=0;}process(_c4){
const out=this.buffer[this._85];this._75=(this._75*this._55)+(out*this._65);this.buffer[this._85]=_c4+(this._75*this.feedback);++this._85;this._85%=this.buffer.length;return out;}_95(_a5){this.feedback=Math.min(Math.max(0,_a5),1);}_b5(_c5){this._55=Math.min(Math.max(0,_c5),1);this._65=1-this._55;}}class _d5{constructor(_45){this.feedback=0;this.buffer=new Float32Array(_45);this._85=0;}process(_c4){const out=this.buffer[this._85];this.buffer[this._85]=_c4+(out*this.feedback);++this._85;this._85%=this.buffer.length;
return(out-_c4);}_95(_a5){this.feedback=Math.min(Math.max(0,_a5),1);}}class _e5 extends AudioWorkletProcessor{static _f5=8;static _g5=4;static _h5=0.015;static _i5=0.4;static _j5=0.28;static _k5=0.7;static _l5=[1116,1188,1277,1356,1422,1491,1557,1617];static _m5=[1139,1211,1300,1379,1445,1514,1580,1640];static _n5=[556,441,341,225];static _o5=[579,464,364,248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",
defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_j3){super();this._33();const _k3=_j3.outputChannelCount[0];this._p5=-1;this._q5=-1;this._r5=new Array(_k3);this._s5=new Array(_k3);const _t5=[_e5._l5,_e5._m5];const _u5=[_e5._n5,_e5._o5];for(let c=0;c<_k3;++c){this._r5[c]=new Array(_e5._f5);this._s5[c]=new Array(_e5._g5);for(let i=0;i<_e5._f5;
++i)this._r5[c][i]=new _35(_t5[c%_t5.length][i]);for(let i=0;i<_e5._g5;++i)this._s5[c][i]=new _d5(_u5[c%_u5.length][i]);}this._v5(0.5);this._b5(0.5);for(let c=0;c<_k3;++c)for(let i=0;i<_e5._g5;++i)this._s5[c][i]._95(0.5);}process(_73,_83,parameters){const input=_73[0];const output=_83[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _93=input[c];const _f3=output[c];for(let _w5=0;_w5<_93.length;++_w5){const _a3=(size[_w5]!==undefined)?size[_w5]:size[0];
const _x5=(damp[_w5]!==undefined)?damp[_w5]:damp[0];this._v5(_a3);this._b5(_x5);_f3[_w5]=_93[_w5];let out=0;const _o3=_93[_w5]*_e5._h5;for(let i=0;i<_e5._f5;++i)out+=this._r5[c][i].process(_o3);for(let i=0;i<_e5._g5;++i)out=this._s5[c][i].process(out);const _b3=(bypass[_w5]!==undefined)?bypass[_w5]:bypass[0];if(_b3>0.0){continue;}const _q3=(mix[_w5]!==undefined)?mix[_w5]:mix[0];_f3[_w5]*=(1-_q3);_f3[_w5]+=(out*_q3);}}return this._43;}_v5(_45){if(_45===this._p5)return;const size=(_45*_e5._j5)+_e5._k5;for(let c=0;
c<this._r5.length;++c)for(let i=0;i<_e5._f5;++i)this._r5[c][i]._95(size);this._p5=_45;}_b5(_c5){if(_c5===this._q5)return;const damp=_c5*_e5._i5;for(let c=0;c<this._r5.length;++c)for(let i=0;i<_e5._f5;++i)this._r5[c][i]._b5(damp);this._q5=_c5;}}registerProcessor("reverb1-processor",_e5);class _y5 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,
maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_j3){super();this._33();const _k3=_j3.outputChannelCount[0];this._z5=new Array(_k3).fill(1.0);this._A5=new Array(_k3).fill(0.0);this._B5=new Array(_k3).fill(_C5._D5._E5);this._F5=new Array(_k3);for(let c=0;c<_k3;++c){this._F5[c]=new _G5();
this._F5[c]._H5(sampleRate);this._F5[c]._I5(this._z5[c]);this._F5[c]._J5(this._B5[c]);if(c%2===1){this._F5[c]._K5(this._A5[c]);}}}process(_73,_83,parameters){const input=_73[0];const output=_83[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let c=0;c<input.length;++c){const _93=input[c];const _f3=output[c];for(let _a3=0;_a3<_93.length;++_a3){_f3[_a3]=_93[_a3];const _p3=(rate[_a3]!==undefined)?rate[_a3]:rate[0];
const _L5=(offset[_a3]!==undefined)?offset[_a3]:offset[0];const _M5=(shape[_a3]!==undefined)?shape[_a3]:shape[0];this._N5(c,_p3,_L5,_M5);const _O5=this._F5[c]._44();const _b3=(bypass[_a3]!==undefined)?bypass[_a3]:bypass[0];if(_b3>0.0){continue;}const i=(intensity[_a3]!==undefined)?intensity[_a3]:intensity[0];const out=_93[_a3]*_O5*i;_f3[_a3]*=(1.0-i);_f3[_a3]+=out;}}return this._43;}_N5(_64,_P5,_Q5,_R5){if(_P5!==this._z5[_64]){this._F5[_64]._I5(_P5);this._z5[_64]=_P5;}if(_Q5!==this._A5[_64]){if(_64%2===1){
this._F5[_64]._K5(_Q5);}this._A5[_64]=_Q5;}if(_R5!==this._B5[_64]){this._F5[_64]._J5(_R5);this._B5[_64]=_R5;}}}registerProcessor("tremolo-processor",_y5);function _C5(){}_C5._D5={_E5:0,_S5:1,_T5:2,_U5:3,_V5:4,_W5:5};_C5._X5=function(_Y5){return 1.0-_Y5;};_C5._Z5=function(_Y5){return _Y5;};_C5.__5=function(_Y5){return 0.5*(Math.sin((_Y5*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_C5._06=function(_Y5){if(_Y5<0.5){return 0.0;}return 1.0;};_C5._16=function(_Y5){if(_Y5<0.5){return 2.0*_Y5;}return 2.0-(2.0*_Y5);};_C5._26=[_C5._X5,
_C5._Z5,_C5.__5,_C5._06,_C5._16];_36._46=512;_36._56=1.0/_36._46;function _36(_66){this.data=new Float32Array(_36._46);for(let i=0;i<_36._46;++i){this.data[i]=_66(i*_36._56);}}_36.prototype._44=function(_Y5){_Y5=Math.max(0.0,_Y5);_Y5=Math.min(_Y5,1.0);const _76=_Y5*_36._46;const _86=~~_76;const _96=_76-_86;let _84=_86;let _94=_84+1;if(_84>=_36._46){_84-=_36._46;}if(_94>=_36._46){_94-=_36._46;}const _a4=this.data[_84];const _b4=this.data[_94];return _a4+(_b4-_a4)*_96;};_G5._a6=[];_G5._b6=false;_G5._c6=0.0;_G5._q4=20.0;
function _G5(){this._d6=48000;this.shape=_C5._D5._T5;this.freq=1.0;this._e6=0.0;this._56=0.0;this._f6=0.0;if(_G5._b6==true){return;}for(let i=0;i<_C5._D5._W5;++i){_G5._a6[i]=new _36(_C5._26[i]);}_G5._b6=true;}_G5._g6=function(){return(_G5._b6==true);};_G5.prototype._H5=function(_h6){this._d6=_h6;this._i6();};_G5.prototype._I5=function(_H4){_H4=Math.max(_G5._c6,_H4);_H4=Math.min(_H4,_G5._q4);this.freq=_H4;this._i6();};_G5.prototype._K5=function(_Q5){_Q5=Math.max(0.0,_Q5);_Q5=Math.min(_Q5,1.0);const _j6=_Q5-this._f6;
this._f6=_Q5;this._e6+=_j6;while(this._e6>=1.0){this._e6-=1.0;}while(this._e6<0.0){this._e6+=1.0;}};_G5.prototype._J5=function(_R5){_R5=Math.max(0,_R5);_R5=Math.min(_R5,_C5._D5._W5-1);this.shape=_R5;};_G5.prototype._44=function(){const result=_G5._a6[this.shape]._44(this._e6);this._e6+=this._56;while(this._e6>=1.0){this._e6-=1.0;}return result;};_G5.prototype._i6=function(){this._56=this.freq/this._d6;};